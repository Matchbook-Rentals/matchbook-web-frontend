generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TripStatus {
  searching
  matching
  finalizing
  reserved
  active
  cancelled
  completed
}

model User {
  id             String    @id @default(uuid()) // Changed from MongoDB's ObjectId
  firstName      String?
  lastName       String?
  fullName       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  trips          Trip[]
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  notifications  Notification[] // Changed from MongoDB's String array
  messages       Message[] // Changed from MongoDB's String array
  HousingRequest HousingRequest[]
  preferences    UserPreferences?
}

model UserPreferences {
  id                 String   @id @default(uuid())
  userId             String   @unique
  createdAt          DateTime @default(now())
  listingType        String
  bedroomCount       Int
  bathroomCount      Int
  furnished          Boolean  @default(false)
  airCondition       Boolean  @default(false)
  laundryFacilites   Boolean  @default(false)
  inUnitWasher       Boolean  @default(false)
  inUnitDryer        Boolean  @default(false)
  fitnessCenter      Boolean  @default(false)
  pool               Boolean  @default(false)
  dishwasher         Boolean  @default(false)
  elevator           Boolean  @default(false)
  wheelchairAccess   Boolean  @default(false)
  doorman            Boolean  @default(false)
  parking            Boolean  @default(false)
  fireplace          Boolean  @default(false)
  wifi               Boolean  @default(false)
  kitchen            Boolean  @default(false)
  dedicatedWorkspace Boolean  @default(false)
  television         Boolean  @default(false)
  hairDryer          Boolean  @default(false)
  iron               Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Account {
  id                String  @id @default(uuid()) // Changed from MongoDB's ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id             String   @id @default(uuid()) // Changed from MongoDB's ObjectId
  title          String
  description    String
  imageSrc       String
  createdAt      DateTime @default(now())
  category       String?
  roomCount      Int
  bathroomCount  Int
  guestCount     Int?
  latLng         String // Changed from MongoDB's String array
  locationString String
  city           String
  state          String
  streetAddress1 String
  streetAddress2 String?
  postalCode     String?
  userId         String
  price          Int

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations    Reservation[]
  housingRequests HousingRequest[]
  Trip            Trip?            @relation(fields: [tripId], references: [id])
  tripId          String?
}

model HousingRequest {
  id        String   @id @default(uuid()) // Added ID field for MySQL
  userId    String
  startDate DateTime
  endDate   DateTime

  // Relationships
  user      User     @relation(fields: [userId], references: [id]) // Added to maintain relationship
  Listing   Listing? @relation(fields: [listingId], references: [id])
  listingId String?
}

model Reservation {
  id         String   @id @default(uuid()) // Changed from MongoDB's ObjectId
  userId     String
  listingId  String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Trip {
  id             String     @id @default(uuid()) // Changed from MongoDB's ObjectId
  locationString String
  city           String?
  state          String?
  postalCode     String?
  locationLatLng String?
  createdAt      DateTime   @default(now())
  startDate      DateTime?
  endDate        DateTime?
  maxPrice       Int?
  minBedroom     Int?
  minBathroom    Int?
  isSponsored    Boolean    @default(false)
  numAdults      Int        @default(1)
  numPets        Int        @default(0)
  numChildren    Int        @default(0)
  sponsorID      String?
  userId         String
  tripStatus     TripStatus @default(searching)

  // Relationships
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Listing     Listing[]
  matches     Match[] // Changed to a relational model
  favoriteIds Favorite[] // Changed to a relational model
}

// Additional models to support the conversion of arrays to relational models
model Notification {
  id      String @id @default(uuid())
  userId  String
  content String

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id      String @id @default(uuid())
  userId  String
  content String

  user User @relation(fields: [userId], references: [id])
}

model Match {
  id      String @id @default(uuid())
  tripId  String
  matchId String // ID of the listing or another entity being matched

  trip Trip @relation(fields: [tripId], references: [id])
}

model Favorite {
  id     String @id @default(uuid())
  tripId String
  favId  String // ID of the listing or another entity marked as favorite

  trip Trip @relation(fields: [tripId], references: [id])
}
