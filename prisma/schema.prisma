generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TripStatus {
  searching
  matching
  finalizing
  reserved
  active
  cancelled
  completed
}

enum CreditBucket {
  Low
  Fair
  Good
  Very_Good
  VeryGood
  Exceptional
}

model User {
  id              String    @id @default(uuid())
  stripeAccountId String?
  firstName       String?
  lastName        String?
  fullName        String?
  email           String?   @unique
  emailVerified   DateTime?
  imageUrl        String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?
  verifiedAt      DateTime? // Timestamp of when user was verified
  hallmarkHostAt  DateTime? // Timestamp of when user became hallmark host
  trailblazerAt   DateTime? // Timestamp of when user became trailblazer

  // Relationships trips          Trip[]
  accounts           Account[]
  listings           Listing[]
  bookings           Booking[]
  notifications      Notification[]
  HousingRequest     HousingRequest[]
  trips              Trip[]
  applications       Application[]
  preferences        UserPreferences?
  participatingTrips Trip[]                    @relation("TripParticipants")
  purchases          Purchase[]
  personReports      PersonReport?
  creditReport       CreditReport?
  conversations      ConversationParticipant[]
  messageReads       MessageRead[]
  sentMessages       Message[]                 @relation("MessageSender")
  boldSignTemplates  BoldSignTemplate[]
  BoldSignLease      BoldSignLease[]
  Lease              Lease[]
  tickets            Ticket[]
}

model UserPreferences {
  id                 String   @id @default(uuid())
  userId             String   @unique
  createdAt          DateTime @default(now())
  listingType        String
  bedroomCount       Int
  bathroomCount      Int
  furnished          Boolean  @default(false)
  airConditioner     Boolean  @default(false)
  laundryFacilites   Boolean  @default(false)
  inUnitWasher       Boolean  @default(false)
  inUnitDryer        Boolean  @default(false)
  fitnessCenter      Boolean  @default(false)
  pool               Boolean  @default(false)
  dishwasher         Boolean  @default(false)
  elevator           Boolean  @default(false)
  wheelchairAccess   Boolean  @default(false)
  doorman            Boolean  @default(false)
  parking            Boolean  @default(false)
  fireplace          Boolean  @default(false)
  wifi               Boolean  @default(false)
  kitchen            Boolean  @default(false)
  dedicatedWorkspace Boolean  @default(false)
  television         Boolean  @default(false)
  hairDryer          Boolean  @default(false)
  iron               Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                     String    @id @default(uuid())
  isApproved             Boolean   @default(false)
  createdAt              DateTime  @default(now())
  lastModified           DateTime  @default(now())
  lastApprovalDecision   DateTime?
  lastDecisionComment    String?   @db.Text
  status                 String    @default("available")
  title                  String
  description            String
  imageSrc               String?
  category               String?
  roomCount              Int
  bathroomCount          Int
  guestCount             Int?
  latitude               Float     @default(0)
  longitude              Float     @default(0)
  locationString         String?
  city                   String?
  state                  String?
  streetAddress1         String?
  streetAddress2         String?
  postalCode             String?
  userId                 String
  squareFootage          Int       @default(0)
  depositSize            Int?
  requireBackgroundCheck Boolean   @default(false)
  shortestLeaseLength    Int       @default(1)
  longestLeaseLength     Int       @default(12)
  shortestLeasePrice     Int       @default(4000)
  longestLeasePrice      Int       @default(3500)
  furnished              Boolean   @default(false)
  utilitiesIncluded      Boolean   @default(false)
  petsAllowed            Boolean   @default(false)

  // General Amenities
  airConditioner     Boolean @default(false)
  laundryFacilities  Boolean @default(false)
  fitnessCenter      Boolean @default(false)
  elevator           Boolean @default(false)
  wheelchairAccess   Boolean @default(false)
  doorman            Boolean @default(false)
  parking            Boolean @default(false)
  wifi               Boolean @default(false)
  kitchen            Boolean @default(false)
  dedicatedWorkspace Boolean @default(false)
  hairDryer          Boolean @default(false)
  iron               Boolean @default(false)
  heater             Boolean @default(false)
  hotTub             Boolean @default(false)
  smokingAllowed     Boolean @default(false)
  eventsAllowed      Boolean @default(false)
  privateEntrance    Boolean @default(false)
  security           Boolean @default(false)
  waterfront         Boolean @default(false)
  beachfront         Boolean @default(false)
  mountainView       Boolean @default(false)
  cityView           Boolean @default(false)
  waterView          Boolean @default(false)

  // Washer and Dryer Options
  washerInUnit       Boolean @default(false)
  washerHookup       Boolean @default(false)
  washerNotAvailable Boolean @default(false)
  washerInComplex    Boolean @default(false)
  dryerInUnit        Boolean @default(false)
  dryerHookup        Boolean @default(false)
  dryerNotAvailable  Boolean @default(false)
  dryerInComplex     Boolean @default(false)

  // Parking Options

  offStreetParking     Boolean @default(false)
  streetParking        Boolean @default(false)
  streetParkingFree    Boolean @default(false)
  coveredParking       Boolean @default(false)
  coveredParkingFree   Boolean @default(false)
  uncoveredParking     Boolean @default(false)
  uncoveredParkingFree Boolean @default(false)
  garageParking        Boolean @default(false)
  garageParkingFree    Boolean @default(false)
  evCharging           Boolean @default(false)

  // Pet Policies
  allowDogs Boolean @default(false)
  allowCats Boolean @default(false)

  // Structural Amenities
  gym             Boolean @default(false)
  balcony         Boolean @default(false)
  patio           Boolean @default(false)
  sunroom         Boolean @default(false)
  fireplace       Boolean @default(false)
  firepit         Boolean @default(false)
  pool            Boolean @default(false)
  sauna           Boolean @default(false)
  jacuzzi         Boolean @default(false)
  grill           Boolean @default(false)
  oven            Boolean @default(false)
  stove           Boolean @default(false)
  wheelAccessible Boolean @default(false)
  fencedInYard    Boolean @default(false)
  secureLobby     Boolean @default(false)
  keylessEntry    Boolean @default(false)
  alarmSystem     Boolean @default(false)
  storageShed     Boolean @default(false)
  gatedEntry      Boolean @default(false)
  smokeDetector   Boolean @default(false)
  carbonMonoxide  Boolean @default(false)

  // Kitchen
  garbageDisposal Boolean @default(false)
  dishwasher      Boolean @default(false)
  fridge          Boolean @default(false)

  //Furnished
  tv                Boolean @default(false)
  workstation       Boolean @default(false)
  microwave         Boolean @default(false)
  kitchenEssentials Boolean @default(false)
  linens            Boolean @default(false)
  privateBathroom   Boolean @default(false)

  // Relationships
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings           Booking[]
  housingRequests    HousingRequest[]
  Trip               Trip?                   @relation(fields: [tripId], references: [id])
  tripId             String?
  listingImages      ListingImage[] // Relation to multiple images
  bedrooms           Bedroom[]
  dislikes           Dislike[]
  matches            Match[]
  boldSignTemplate   BoldSignTemplate?       @relation(fields: [boldSignTemplateId], references: [id])
  boldSignTemplateId String?
  unavailablePeriods ListingUnavailability[]
  Maybe              Maybe[]
}

model ListingUnavailability {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  reason    String? // Optional: could track why it's blocked (repairs, personal reasons, etc.)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model ListingImage {
  id        String  @id @default(uuid())
  url       String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  category  String?
  rank      Int?
}

model Bedroom {
  id            String  @id @default(uuid())
  listingId     String  @map("listing_id")
  bedroomNumber Int
  bedType       String
  listing       Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, bedroomNumber])
  @@index([listingId])
}

model HousingRequest {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  tripId    String
  startDate DateTime
  endDate   DateTime
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
  trip    Trip    @relation(fields: [tripId], references: [id])

  // Constraints
  @@unique([listingId, tripId])
}

model Booking {
  id           String        @id @default(uuid())
  userId       String
  listingId    String
  tripId       String?
  matchId      String        @unique
  startDate    DateTime
  endDate      DateTime
  totalPrice   Int?
  monthlyRent  Int?
  rentPayments RentPayment[]

  createdAt DateTime @default(now())
  status    String   @default("reserved")

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  match   Match   @relation(fields: [matchId], references: [id])
  trip    Trip?   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
}

model Trip {
  id             String     @id @default(uuid())
  locationString String
  latitude       Float      @default(0)
  longitude      Float      @default(0)
  city           String?
  state          String?
  postalCode     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  isSponsored    Boolean    @default(false)
  sponsorID      String?
  startDate      DateTime?
  endDate        DateTime?
  numAdults      Int        @default(1)
  numPets        Int        @default(0)
  numChildren    Int        @default(0)
  userId         String
  tripStatus     TripStatus @default(searching)
  flexibleStart  Int        @default(0)
  flexibleEnd    Int        @default(0)

  //Num Filters
  minPrice     Int?
  maxPrice     Int?
  minBeds      Int?
  minBedrooms  Int?
  minBathrooms Int?
  searchRadius Int? @default(50)

  // Highlight Filters
  furnished            Boolean? @default(false)
  unfurnished          Boolean? @default(false)
  utilitiesIncluded    Boolean? @default(false)
  utilitiesNotIncluded Boolean? @default(false)
  petsAllowed          Boolean? @default(false)
  petsNotAllowed       Boolean? @default(false)
  singleFamily         Boolean? @default(false)
  privateRoom          Boolean? @default(false)
  townhouse            Boolean? @default(false)
  apartment            Boolean? @default(false)

  // General Amenities
  airConditioner     Boolean? @default(false)
  laundryFacilities  Boolean? @default(false)
  fitnessCenter      Boolean? @default(false)
  elevator           Boolean? @default(false)
  wheelchairAccess   Boolean? @default(false)
  doorman            Boolean? @default(false)
  parking            Boolean? @default(false)
  wifi               Boolean? @default(false)
  kitchen            Boolean? @default(false)
  dedicatedWorkspace Boolean? @default(false)
  hairDryer          Boolean? @default(false)
  iron               Boolean? @default(false)
  heater             Boolean? @default(false)
  hotTub             Boolean? @default(false)
  smokingAllowed     Boolean? @default(false)
  eventsAllowed      Boolean? @default(false)
  privateEntrance    Boolean? @default(false)
  security           Boolean? @default(false)
  waterfront         Boolean? @default(false)
  beachfront         Boolean? @default(false)
  mountainView       Boolean? @default(false)
  cityView           Boolean? @default(false)
  waterView          Boolean? @default(false)

  // Washer and Dryer Options
  washerInUnit       Boolean? @default(false)
  washerHookup       Boolean? @default(false)
  washerNotAvailable Boolean? @default(false)
  washerInComplex    Boolean? @default(false)
  dryerInUnit        Boolean? @default(false)
  dryerHookup        Boolean? @default(false)
  dryerNotAvailable  Boolean? @default(false)
  dryerInComplex     Boolean? @default(false)

  // Parking Options
  offStreetParking     Boolean? @default(false)
  streetParking        Boolean? @default(false)
  streetParkingFree    Boolean? @default(false)
  coveredParking       Boolean? @default(false)
  coveredParkingFree   Boolean? @default(false)
  uncoveredParking     Boolean? @default(false)
  uncoveredParkingFree Boolean? @default(false)
  garageParking        Boolean? @default(false)
  garageParkingFree    Boolean? @default(false)
  evCharging           Boolean? @default(false)

  // Pet Policies
  allowDogs Boolean? @default(false)
  allowCats Boolean? @default(false)

  // Structural Amenities
  gym             Boolean? @default(false)
  balcony         Boolean? @default(false)
  patio           Boolean? @default(false)
  sunroom         Boolean? @default(false)
  fireplace       Boolean? @default(false)
  firepit         Boolean? @default(false)
  pool            Boolean? @default(false)
  sauna           Boolean? @default(false)
  jacuzzi         Boolean? @default(false)
  grill           Boolean? @default(false)
  oven            Boolean? @default(false)
  stove           Boolean? @default(false)
  wheelAccessible Boolean? @default(false)
  fencedInYard    Boolean? @default(false)
  secureLobby     Boolean? @default(false)
  keylessEntry    Boolean? @default(false)
  alarmSystem     Boolean? @default(false)
  storageShed     Boolean? @default(false)
  gatedEntry      Boolean? @default(false)
  smokeDetector   Boolean? @default(false)
  carbonMonoxide  Boolean? @default(false)

  // Kitchen
  garbageDisposal Boolean? @default(false)
  dishwasher      Boolean? @default(false)
  fridge          Boolean? @default(false)

  // Furnished
  tv                Boolean? @default(false)
  workstation       Boolean? @default(false)
  microwave         Boolean? @default(false)
  kitchenEssentials Boolean? @default(false)
  linens            Boolean? @default(false)
  privateBathroom   Boolean? @default(false)

  allParticipants User[] @relation("TripParticipants")

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings        Listing[]
  matches         Match[]
  favorites       Favorite[]
  housingRequests HousingRequest[]
  dislikes        Dislike[]
  maybes          Maybe[]
  applications    Application[]
  bookings        Booking[]
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  content    String
  url        String
  createdAt  DateTime @default(now())
  unread     Boolean  @default(true)
  actionType String // This will store the type of action (e.g., "HousingRequest", "Payment", "Booking", "Review")
  actionId   String // This will store the ID of the related action

  user User @relation(fields: [userId], references: [id])

  @@index([actionType, actionId])
}

model Message {
  id             String   @id @default(cuid())
  content        String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  senderId       String
  conversationId String
  isRead         Boolean  @default(false)
  imgUrl         String?
  fileName       String?
  fileKey        String?
  fileType       String?
  metadata       String?  @db.Text // Store JSON metadata like clientId, delivery status, etc.

  sender       User          @relation("MessageSender", fields: [senderId], references: [id])
  conversation Conversation  @relation(fields: [conversationId], references: [id])
  readBy       MessageRead[]

  @@index([senderId])
  @@index([conversationId])
}

model Conversation {
  id           String                    @id @default(cuid())
  name         String? // For group chats
  isGroup      Boolean                   @default(false)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  listingId    String?
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String    @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())
  leftAt         DateTime? // For tracking when someone leaves a group
  role           String    @default("member") // Could be "admin", "member", etc.

  conversation Conversation @relation(fields: [conversationId], references: [id])

  User User @relation(fields: [userId], references: [id])

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model Match {
  id          String   @id @default(uuid())
  tripId      String
  listingId   String
  booking     Booking?
  monthlyRent Int?

  trip          Trip           @relation(fields: [tripId], references: [id])
  listing       Listing        @relation(fields: [listingId], references: [id])
  BoldSignLease BoldSignLease?
  Lease         Lease?

  @@index([tripId])
}

model Favorite {
  id        String   @id @default(uuid())
  tripId    String
  listingId String?
  rank      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, rank])
  @@unique([tripId, listingId])
}

model Dislike {
  id        String   @id @default(uuid())
  tripId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([tripId, listingId])
}

model Maybe {
  id        String   @id @default(uuid())
  tripId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([tripId, listingId])
}

model Application {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDefault  Boolean? @default(false)
  tripId     String?
  userId     String
  isComplete Boolean  @default(false)

  // Personal Info
  firstName    String?
  middleName   String?
  lastName     String?
  noMiddleName Boolean?  @default(false)
  dateOfBirth  DateTime?
  ssn          String? // Encrypted value to be stored

  residentialHistories ResidentialHistory[]

  // Comments to explain Yes answers
  evicted            Boolean?
  brokenLease        Boolean?
  felony             Boolean?
  landlordDispute    Boolean?
  evictedExplanation String?
  felonyExplanation  String?

  // Relationships
  user               User                @relation(fields: [userId], references: [id])
  trip               Trip?               @relation(fields: [tripId], references: [id])
  identifications    Identification[] // Keep as one-to-many temporarily
  incomes            Income[]
  verificationImages VerificationImage[]

  @@unique([userId, tripId])
  @@unique([userId, isDefault])
}

model Identification {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  idType        String
  idNumber      String
  idPhotos      IDPhoto[] // One-to-many relationship with ID photos
  isPrimary     Boolean     @default(false) // Flag for the primary ID

  @@index([applicationId])
}

model IDPhoto {
  id               String         @id @default(cuid())
  url              String
  identification   Identification @relation(fields: [identificationId], references: [id], onDelete: Cascade)
  identificationId String
  isPrimary        Boolean        @default(false)
  createdAt        DateTime       @default(now())

  @@index([identificationId])
}

model Income {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  source        String
  monthlyAmount String
  imageUrl      String?

  @@index([applicationId])
}

enum ImageCategory {
  Income
  Identification
}

model VerificationImage {
  id            String        @id @default(cuid())
  url           String
  category      ImageCategory
  application   Application   @relation(fields: [applicationId], references: [id])
  applicationId String

  @@index([applicationId])
}

model Purchase {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("pending")
  isRedeemed Boolean  @default(false)
  email      String?
  type       String
  amount     Int?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PersonReport {
  id            String   @id @default(cuid())
  userId        String   @unique
  firstName     String
  lastName      String
  dateOfBirth   String?
  city          String?
  state         String?
  reportToken   String?
  bankruptcies  Int?
  judgements    Int?
  liens         Int?
  isSexOffender Boolean?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CreditReport {
  id              String       @id @default(uuid())
  userId          String       @unique
  creditBucket    CreditBucket
  creditUpdatedAt DateTime
  consentReceived DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RentPayment {
  id        String   @id @default(cuid())
  bookingId String
  amount    Int
  dueDate   DateTime
  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

model BoldSignTemplate {
  id                  String   @id @default(uuid())
  embedUrl            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  templateName        String?
  templateDescription String?

  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
  listings Listing[]

  @@index([userId])
}

model BoldSignLease {
  id                String   @id @default(cuid())
  embedUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  matchId           String
  landlordId        String
  primaryTenantId   String
  secondaryTenantId String?
  landlordSigned    Boolean  @default(false)
  tenantSigned      Boolean  @default(false)

  match    Match @relation(fields: [matchId], references: [id])
  landlord User  @relation(fields: [landlordId], references: [id])

  @@unique([matchId])
}

model Lease {
  id                String   @id @default(cuid())
  embedUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  matchId           String
  landlordId        String
  primaryTenantId   String
  secondaryTenantId String?
  landlordSigned    Boolean  @default(false)
  tenantSigned      Boolean  @default(false)

  match    Match @relation(fields: [matchId], references: [id])
  landlord User  @relation(fields: [landlordId], references: [id])

  @@unique([matchId])
}

model BlogArticle {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String     @db.VarChar(255)
  content     String     @db.LongText
  excerpt     String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  imageUrl    String?
  published   Boolean    @default(false)
  authorName  String     @default("The Matchbook Team")
  authorTitle String?
  categories  Category[]
  tags        Tag[]

  @@index([slug])
  @@index([createdAt])
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?       @db.Text
  articles    BlogArticle[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([slug])
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  articles  BlogArticle[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([slug])
}

model Ticket {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  status      String    @default("open") // open, in-progress, resolved, closed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?

  // User information
  email  String
  name   String?
  userId String? // Optional: link to user if they're logged in

  // Context information
  pageUrl   String?
  userAgent String?

  // Category/type of issue
  category String? // bug, feature-request, support, complaint, etc.
  priority String? // low, medium, high, urgent

  // Internal tracking
  assignedTo   String? // Admin/support person email
  notifyEmail  String? // Email to send notifications to (configurable)
  supportNotes String? @db.Text // Internal notes for support staff

  // Relationships
  responses TicketResponse[]
  user      User?            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([category])
}

model TicketResponse {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  isFromStaff Boolean  @default(false)
  authorName  String?
  authorEmail String?

  // Relationship
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

  @@index([ticketId])
}

model ResidentialHistory {
  id                  String  @id @default(uuid())
  street              String?
  apt                 String?
  city                String?
  state               String?
  zipCode             String?
  monthlyPayment      String?
  durationOfTenancy   String?
  housingStatus       String?
  landlordFirstName   String?
  landlordLastName    String?
  landlordEmail       String?
  landlordPhoneNumber String?
  index               Int?

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
}
