generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TripStatus {
  searching
  matching
  finalizing
  reserved
  active
  cancelled
  completed
}

model User {
  id             String    @id @default(uuid()) 
  firstName      String?
  lastName       String?
  fullName       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  trips          Trip[]
  accounts       Account[]
  listings       Listing[]
  bookings       Booking[]
  notifications  Notification[] 
  messages       Message[] 
  HousingRequest HousingRequest[]
  preferences    UserPreferences?
}

model UserPreferences {
  id                 String   @id @default(uuid())
  userId             String   @unique
  createdAt          DateTime @default(now())
  listingType        String
  bedroomCount       Int
  bathroomCount      Int
  furnished          Boolean  @default(false)
  airCondition       Boolean  @default(false)
  laundryFacilites   Boolean  @default(false)
  inUnitWasher       Boolean  @default(false)
  inUnitDryer        Boolean  @default(false)
  fitnessCenter      Boolean  @default(false)
  pool               Boolean  @default(false)
  dishwasher         Boolean  @default(false)
  elevator           Boolean  @default(false)
  wheelchairAccess   Boolean  @default(false)
  doorman            Boolean  @default(false)
  parking            Boolean  @default(false)
  fireplace          Boolean  @default(false)
  wifi               Boolean  @default(false)
  kitchen            Boolean  @default(false)
  dedicatedWorkspace Boolean  @default(false)
  television         Boolean  @default(false)
  hairDryer          Boolean  @default(false)
  iron               Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Account {
  id                String  @id @default(uuid()) 
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                     String   @id @default(uuid())
  status                 String   @default("available")
  title                  String
  description            String
  imageSrc               String?
  createdAt              DateTime @default(now())
  category               String?
  roomCount              Int
  bathroomCount          Int
  guestCount             Int?
  latitude               Float    @default(0)
  longitude              Float    @default(0)
  locationString         String?
  city                   String?
  state                  String?
  streetAddress1         String?
  streetAddress2         String?
  postalCode             String?
  userId                 String
  squareFootage          Int      @default(0)
  depositSize            Int?
  requireBackgroundCheck Boolean  @default(false)
  shortestLeaseLength    Int      @default(1) 
  longestLeaseLength     Int      @default(12) 
  shortestLeasePrice     Int      @default(4000)
  longestLeasePrice      Int      @default(3500)
  furnished              Boolean  @default(false)

  // General Amenities
  airConditioning    Boolean @default(false)
  laundryFacilities  Boolean @default(false)
  fitnessCenter      Boolean @default(false)
  elevator           Boolean @default(false)
  wheelchairAccess   Boolean @default(false)
  doorman            Boolean @default(false)
  parking            Boolean @default(false)
  wifi               Boolean @default(false)
  kitchen            Boolean @default(false)
  dedicatedWorkspace Boolean @default(false)
  hairDryer          Boolean @default(false)
  iron               Boolean @default(false)
  heating            Boolean @default(false)
  hotTub             Boolean @default(false)
  petsAllowed        Boolean @default(false)
  smokingAllowed     Boolean @default(false)
  eventsAllowed      Boolean @default(false)
  privateEntrance    Boolean @default(false)
  secure             Boolean @default(false)
  waterfront         Boolean @default(false)
  beachfront         Boolean @default(false)
  mountainView       Boolean @default(false)

  // Washer and Dryer Options
  washerInUnit       Boolean @default(false)
  washerHookup       Boolean @default(false)
  washerNotAvailable Boolean @default(false)
  washerInComplex    Boolean @default(false)
  dryerInUnit        Boolean @default(false)
  dryerHookup        Boolean @default(false)
  dryerNotAvailable  Boolean @default(false)
  dryerInComplex     Boolean @default(false)

  // Parking Options
  streetParking        Boolean @default(false)
  streetParkingFree    Boolean @default(false)
  coveredParking       Boolean @default(false)
  coveredParkingFree   Boolean @default(false)
  uncoveredParking     Boolean @default(false)
  uncoveredParkingFree Boolean @default(false)
  garageParking        Boolean @default(false)
  garageParkingFree    Boolean @default(false)
  evCharging           Boolean @default(false)

  // Pet Policies
  allowDogs Boolean @default(false)
  allowCats Boolean @default(false)

  // Structural Amenities
  gym             Boolean @default(false)
  balcony         Boolean @default(false)
  patio           Boolean @default(false)
  sunroom         Boolean @default(false)
  fireplace       Boolean @default(false)
  firepit         Boolean @default(false)
  pool            Boolean @default(false)
  jacuzzi         Boolean @default(false)
  grill           Boolean @default(false)
  oven            Boolean @default(false)
  stove           Boolean @default(false)
  wheelAccessible Boolean @default(false)
  fencedInYard    Boolean @default(false)
  secureLobby     Boolean @default(false)
  keylessEntry    Boolean @default(false)
  alarmSystem     Boolean @default(false)
  storageShed     Boolean @default(false)

  // Kitchen
  garbageDisposal Boolean @default(false)
  dishwasher      Boolean @default(false)

  //Furnished
  tv                Boolean @default(false)
  workstation       Boolean @default(false)
  microwave         Boolean @default(false)
  kitchenEssentails Boolean @default(false)
  linens            Boolean @default(false)
  privateBathroom   Boolean @default(false)

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  housingRequests HousingRequest[]
  Trip            Trip?            @relation(fields: [tripId], references: [id])
  tripId          String?
  listingImages   ListingImage[] // Relation to multiple images
  bedrooms        Bedroom[]
  dislikes         Dislike[]
}

model ListingImage {
  id        String  @id @default(uuid())
  url       String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  category  String?
  rank      Int?
}

model Bedroom {
  id            String  @id @default(uuid())
  listingId     String  @map("listing_id")
  bedroomNumber Int 
  bedType       String 
  listing       Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, bedroomNumber]) 
  @@index([listingId]) 
}

model HousingRequest {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  tripId    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User     @relation(fields: [userId], references: [id])
  listing Listing  @relation(fields: [listingId], references: [id])
  trip    Trip    @relation(fields: [tripId], references: [id])

// Contraints
  @@unique([listingId, tripId])
}

model Booking {
  id         String   @id @default(uuid()) 
  userId     String
  listingId  String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  status     String   @default("reserved")

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Trip {
  id             String     @id @default(uuid()) 
  locationString String
  latitude       Float      @default(0)
  longitude      Float      @default(0)
  city           String?
  state          String?
  postalCode     String?
  createdAt      DateTime   @default(now())
  startDate      DateTime?
  endDate        DateTime?
  maxPrice       Int?
  minBedroom     Int?
  minBathroom    Int?
  isSponsored    Boolean    @default(false)
  numAdults      Int        @default(1)
  numPets        Int        @default(0)
  numChildren    Int        @default(0)
  sponsorID      String?
  userId         String
  tripStatus     TripStatus @default(searching)

  // Relationships
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings          Listing[]
  matches           Match[] 
  favorites         Favorite[] 
  housingRequests   HousingRequest[] 
  dislikes          Dislike[]
}

model Notification {
  id      String @id @default(uuid())
  userId  String
  content String

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id      String @id @default(uuid())
  userId  String
  content String

  user User @relation(fields: [userId], references: [id])
}

model Match {
  id      String @id @default(uuid())
  tripId  String
  matchId String 

  trip Trip @relation(fields: [tripId], references: [id])
}

model Favorite {
  id        String  @id @default(uuid())
  tripId    String 
  listingId String? 
  rank      Int? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, rank])
  @@unique([tripId, listingId])
}

model Dislike {
  id        String   @id @default(uuid())
  tripId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([tripId, listingId])
}

