generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TripStatus {
  searching
  matching
  finalizing
  reserved
  active
  cancelled
  completed
}

enum CreditBucket {
  Low
  Fair
  Good
  Very_Good
  VeryGood
  Exceptional
}

enum ApprovalStatus {
  approved
  rejected
  pendingReview
}

model User {
  id               String    @id @default(uuid())
  stripeAccountId  String?
  stripeCustomerId String?
  // Stripe Connect onboarding status fields
  stripeChargesEnabled    Boolean?  @default(false)  // Can accept payments
  stripePayoutsEnabled    Boolean?  @default(false)  // Can receive payouts
  stripeDetailsSubmitted  Boolean?  @default(false)  // Completed onboarding form
  firstName        String?
  lastName         String?
  fullName         String?
  email            String?   @unique
  emailVerified    DateTime?
  imageUrl         String?
  hashedPassword   String?
  role             String    @default("user") // User role (user, admin, etc.)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLogin        DateTime?
  verifiedAt       DateTime? // Timestamp of when user was verified
  hallmarkHostAt   DateTime? // Timestamp of when user became hallmark host
  trailblazerAt    DateTime? // Timestamp of when user became trailblazer
  agreedToTerms    DateTime? // Timestamp of when user last agreed to terms

  // Relationships trips          Trip[]
  accounts           Account[]
  listings           Listing[]
  bookings           Booking[]
  notifications      Notification[]
  HousingRequest     HousingRequest[]
  trips              Trip[]
  applications       Application[]
  preferences        UserPreferences?
  participatingTrips Trip[]                    @relation("TripParticipants")
  purchases          Purchase[]
  personReports      PersonReport?
  creditReport       CreditReport?
  bgsReports         BGSReport[]
  conversations      ConversationParticipant[]
  messageReads       MessageRead[]
  sentMessages       Message[]                 @relation("MessageSender")
  boldSignTemplates  BoldSignTemplate[]
  BoldSignLease      BoldSignLease[]
  Lease              Lease[]
  tickets            Ticket[]
  applicationErrors  ApplicationError[] // Relation to application errors logged for this user
  clientLogs         ClientLog[] // Relation to client logs submitted by this user
  paymentReceipts    PaymentReceipt[]
  paymentTransactions PaymentTransaction[]
  locationChanges    ListingLocationChange[]

  // Hospitable integration
  hospitableAccessToken   String?   @db.VarChar(1500)
  hospitableRefreshToken  String?   @db.VarChar(1500)
  hospitableAccountId     String?   @unique
  
  // PDF Templates
  pdfTemplates            PdfTemplate[]
  documents               DocumentInstance[]
  signatures              UserSignature[]
}

model UserPreferences {
  id                 String   @id @default(uuid())
  userId             String   @unique
  createdAt          DateTime @default(now())
  listingType        String
  bedroomCount       Int
  bathroomCount      Float
  furnished          Boolean  @default(false)
  airConditioner     Boolean  @default(false)
  laundryFacilites   Boolean  @default(false)
  inUnitWasher       Boolean  @default(false)
  inUnitDryer        Boolean  @default(false)
  fitnessCenter      Boolean  @default(false)
  pool               Boolean  @default(false)
  dishwasher         Boolean  @default(false)
  elevator           Boolean  @default(false)
  wheelchairAccess   Boolean  @default(false)
  doorman            Boolean  @default(false)
  parking            Boolean  @default(false)
  fireplace          Boolean  @default(false)
  wifi               Boolean  @default(false)
  kitchen            Boolean  @default(false)
  dedicatedWorkspace Boolean  @default(false)
  television         Boolean  @default(false)
  hairDryer          Boolean  @default(false)
  iron               Boolean  @default(false)

  // Email notification preferences
  // Messages & Communication
  emailNewMessageNotifications      Boolean @default(false)
  emailNewConversationNotifications Boolean @default(false)
  
  // Applications & Matching  
  emailApplicationReceivedNotifications Boolean @default(false)
  emailApplicationApprovedNotifications Boolean @default(false)
  emailApplicationDeclinedNotifications Boolean @default(false)
  
  // Reviews & Verification
  emailSubmitHostReviewNotifications    Boolean @default(false)
  emailSubmitRenterReviewNotifications  Boolean @default(false)
  emailLandlordInfoRequestNotifications Boolean @default(false)
  emailVerificationCompletedNotifications Boolean @default(false)
  
  // Bookings & Stays
  emailBookingCompletedNotifications  Boolean @default(false)
  emailBookingCanceledNotifications   Boolean @default(false)
  emailMoveOutUpcomingNotifications   Boolean @default(false)
  emailMoveInUpcomingNotifications    Boolean @default(false)
  
  // Payments
  emailPaymentSuccessNotifications Boolean @default(false)
  emailPaymentFailedNotifications  Boolean @default(false)
  
  // External Communications
  emailOffPlatformHostNotifications Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                     String         @id @default(uuid())
  isApproved             Boolean        @default(false)
  approvalStatus         ApprovalStatus @default(pendingReview)
  isTestListing          Boolean        @default(false)
  createdAt              DateTime       @default(now())
  lastModified           DateTime       @default(now())
  lastApprovalDecision   DateTime?
  lastDecisionComment    String?        @db.Text
  status                 String         @default("available")
  title                  String
  description            String         @db.VarChar(1500)
  imageSrc               String?
  category               String?
  roomCount              Int
  bathroomCount          Float
  guestCount             Int?
  latitude               Float     @default(0)
  longitude              Float     @default(0)
  locationString         String?
  city                   String?
  state                  String?
  streetAddress1         String?
  streetAddress2         String?
  postalCode             String?
  userId                 String
  squareFootage          Int       @default(0)
  depositSize            Int?      @default(0)
  petDeposit             Int?      @default(0)
  petRent                Int?      @default(0)
  reservationDeposit     Int?      @default(0)
  rentDueAtBooking       Int?      @default(0)
  requireBackgroundCheck Boolean   @default(false)
  shortestLeaseLength    Int       @default(1)
  longestLeaseLength     Int       @default(12)
  shortestLeasePrice     Int       @default(4000)
  longestLeasePrice      Int       @default(3500)
  furnished              Boolean   @default(false)
  utilitiesIncluded      Boolean   @default(false)
  petsAllowed            Boolean   @default(false)
  markedActiveByUser     Boolean   @default(true)

  // General Amenities
  airConditioner     Boolean @default(false)
  laundryFacilities  Boolean @default(false)
  fitnessCenter      Boolean @default(false)
  elevator           Boolean @default(false)
  wheelchairAccess   Boolean @default(false)
  doorman            Boolean @default(false)
  parking            Boolean @default(false)
  wifi               Boolean @default(false)
  kitchen            Boolean @default(false)
  dedicatedWorkspace Boolean @default(false)
  hairDryer          Boolean @default(false)
  iron               Boolean @default(false)
  heater             Boolean @default(false)
  hotTub             Boolean @default(false)
  smokingAllowed     Boolean @default(false)
  eventsAllowed      Boolean @default(false)
  privateEntrance    Boolean @default(false)
  security           Boolean @default(false)
  waterfront         Boolean @default(false)
  beachfront         Boolean @default(false)
  mountainView       Boolean @default(false)
  cityView           Boolean @default(false)
  waterView          Boolean @default(false)

  // Washer and Dryer Options
  washerInUnit       Boolean @default(false)
  washerHookup       Boolean @default(false)
  washerNotAvailable Boolean @default(false)
  washerInComplex    Boolean @default(false)
  dryerInUnit        Boolean @default(false)
  dryerHookup        Boolean @default(false)
  dryerNotAvailable  Boolean @default(false)
  dryerInComplex     Boolean @default(false)

  // Parking Options

  offStreetParking     Boolean @default(false)
  streetParking        Boolean @default(false)
  streetParkingFree    Boolean @default(false)
  coveredParking       Boolean @default(false)
  coveredParkingFree   Boolean @default(false)
  uncoveredParking     Boolean @default(false)
  uncoveredParkingFree Boolean @default(false)
  garageParking        Boolean @default(false)
  garageParkingFree    Boolean @default(false)
  evCharging           Boolean @default(false)

  // Pet Policies
  allowDogs Boolean @default(false)
  allowCats Boolean @default(false)

  // Structural Amenities
  gym             Boolean @default(false)
  balcony         Boolean @default(false)
  patio           Boolean @default(false)
  sunroom         Boolean @default(false)
  fireplace       Boolean @default(false)
  firepit         Boolean @default(false)
  pool            Boolean @default(false)
  sauna           Boolean @default(false)
  jacuzzi         Boolean @default(false)
  grill           Boolean @default(false)
  oven            Boolean @default(false)
  stove           Boolean @default(false)
  wheelAccessible Boolean @default(false)
  fencedInYard    Boolean @default(false)
  secureLobby     Boolean @default(false)
  keylessEntry    Boolean @default(false)
  alarmSystem     Boolean @default(false)
  storageShed     Boolean @default(false)
  gatedEntry      Boolean @default(false)
  smokeDetector   Boolean @default(false)
  carbonMonoxide  Boolean @default(false)

  // Kitchen
  garbageDisposal Boolean @default(false)
  dishwasher      Boolean @default(false)
  fridge          Boolean @default(false)

  //Furnished
  tv                Boolean @default(false)
  workstation       Boolean @default(false)
  microwave         Boolean @default(false)
  kitchenEssentials Boolean @default(false)
  linens            Boolean @default(false)
  privateBathroom   Boolean @default(false)
  
  // Third-party integrations
  hospitablePropertyId String? @unique

  // Move-in Instructions
  moveInPropertyAccess String? @db.Text
  moveInParkingInfo    String? @db.Text
  moveInWifiInfo       String? @db.Text
  moveInOtherNotes     String? @db.Text

  // Relationships
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings           Booking[]
  housingRequests    HousingRequest[]
  Trip               Trip?                   @relation(fields: [tripId], references: [id])
  tripId             String?
  listingImages      ListingImage[] // Relation to multiple images
  bedrooms           Bedroom[]
  dislikes           Dislike[]
  matches            Match[]
  boldSignTemplate   BoldSignTemplate?       @relation(fields: [boldSignTemplateId], references: [id])
  boldSignTemplateId String?
  unavailablePeriods ListingUnavailability[]
  Maybe              Maybe[]
  conversations      Conversation[]          @relation("ConversationToListing")
  monthlyPricing     ListingMonthlyPricing[]
  locationChanges    ListingLocationChange[]
  pdfTemplates       PdfTemplate[] // Listing-specific PDF templates
  @@index([state])
}

model ListingUnavailability {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  reason    String? // Optional: could track why it's blocked (repairs, personal reasons, etc.)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  @@index([listingId])
}

model ListingMonthlyPricing {
  id                String   @id @default(uuid())
  listingId         String
  months            Int      // Number of months (1-12)
  price             Int      // Price for this month length
  utilitiesIncluded Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  listing           Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingInCreation ListingInCreation? @relation(fields: [listingId], references: [id], onDelete: Cascade, map: "ListingMonthlyPricing_listingInCreation_fkey")
  
  @@unique([listingId, months])
  @@index([listingId])
}

model ListingImage {
  id        String  @id @default(uuid())
  url       String
  listingId String
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade, map: "ListingImage_listing_fkey")
  listingInCreation   ListingInCreation? @relation(fields: [listingId], references: [id], onDelete: Cascade, map: "ListingImage_listingInCreation_fkey")
  category  String?
  rank      Int?
  @@index([listingId])
}

model Bedroom {
  id            String  @id @default(uuid())
  listingId     String  @map("listing_id")
  bedroomNumber Int
  bedType       String
  listing       Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, bedroomNumber])
  @@index([listingId])
}

model HousingRequest {
  id              String   @id @default(uuid())
  userId          String
  listingId       String
  tripId          String
  startDate       DateTime
  endDate         DateTime
  status          String   @default("pending")
  leaseDocumentId String?
  boldSignLeaseId String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user          User           @relation(fields: [userId], references: [id])
  listing       Listing        @relation(fields: [listingId], references: [id])
  trip          Trip           @relation(fields: [tripId], references: [id])
  boldSignLease BoldSignLease? @relation(fields: [boldSignLeaseId], references: [id])

  // Constraints
  @@unique([listingId, tripId])
}

model Booking {
  id           String        @id @default(uuid())
  userId       String
  listingId    String
  tripId       String?
  matchId      String        @unique
  startDate    DateTime
  endDate      DateTime
  totalPrice   Int?
  monthlyRent  Int?
  rentPayments RentPayment[]

  createdAt DateTime @default(now())
  status    String   @default("reserved")
  moveInCompletedAt DateTime?

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  match   Match   @relation(fields: [matchId], references: [id])
  trip    Trip?   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  paymentTransactions PaymentTransaction[]

  @@index([tripId])
}

model Trip {
  id             String     @id @default(uuid())
  locationString String
  latitude       Float      @default(0)
  longitude      Float      @default(0)
  city           String?
  state          String?
  postalCode     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  isSponsored    Boolean    @default(false)
  sponsorID      String?
  startDate      DateTime?
  endDate        DateTime?
  numAdults      Int        @default(1)
  numPets        Int        @default(0)
  numChildren    Int        @default(0)
  userId         String
  tripStatus     TripStatus @default(searching)
  flexibleStart  Int        @default(0)
  flexibleEnd    Int        @default(0)

  //Num Filters
  minPrice     Int?
  maxPrice     Int?
  minBeds      Int?
  minBedrooms  Int?
  minBathrooms Float?
  searchRadius Int? @default(50)

  // Highlight Filters
  furnished            Boolean? @default(false)
  unfurnished          Boolean? @default(false)
  utilitiesIncluded    Boolean? @default(false)
  utilitiesNotIncluded Boolean? @default(false)
  petsAllowed          Boolean? @default(false)
  petsNotAllowed       Boolean? @default(false)
  singleFamily         Boolean? @default(false)
  privateRoom          Boolean? @default(false)
  townhouse            Boolean? @default(false)
  apartment            Boolean? @default(false)

  // General Amenities
  airConditioner     Boolean? @default(false)
  laundryFacilities  Boolean? @default(false)
  fitnessCenter      Boolean? @default(false)
  elevator           Boolean? @default(false)
  wheelchairAccess   Boolean? @default(false)
  doorman            Boolean? @default(false)
  parking            Boolean? @default(false)
  wifi               Boolean? @default(false)
  kitchen            Boolean? @default(false)
  dedicatedWorkspace Boolean? @default(false)
  hairDryer          Boolean? @default(false)
  iron               Boolean? @default(false)
  heater             Boolean? @default(false)
  hotTub             Boolean? @default(false)
  smokingAllowed     Boolean? @default(false)
  eventsAllowed      Boolean? @default(false)
  privateEntrance    Boolean? @default(false)
  security           Boolean? @default(false)
  waterfront         Boolean? @default(false)
  beachfront         Boolean? @default(false)
  mountainView       Boolean? @default(false)
  cityView           Boolean? @default(false)
  waterView          Boolean? @default(false)

  // Washer and Dryer Options
  washerInUnit       Boolean? @default(false)
  washerHookup       Boolean? @default(false)
  washerNotAvailable Boolean? @default(false)
  washerInComplex    Boolean? @default(false)
  dryerInUnit        Boolean? @default(false)
  dryerHookup        Boolean? @default(false)
  dryerNotAvailable  Boolean? @default(false)
  dryerInComplex     Boolean? @default(false)

  // Parking Options
  offStreetParking     Boolean? @default(false)
  streetParking        Boolean? @default(false)
  streetParkingFree    Boolean? @default(false)
  coveredParking       Boolean? @default(false)
  coveredParkingFree   Boolean? @default(false)
  uncoveredParking     Boolean? @default(false)
  uncoveredParkingFree Boolean? @default(false)
  garageParking        Boolean? @default(false)
  garageParkingFree    Boolean? @default(false)
  evCharging           Boolean? @default(false)

  // Pet Policies
  allowDogs Boolean? @default(false)
  allowCats Boolean? @default(false)

  // Structural Amenities
  gym             Boolean? @default(false)
  balcony         Boolean? @default(false)
  patio           Boolean? @default(false)
  sunroom         Boolean? @default(false)
  fireplace       Boolean? @default(false)
  firepit         Boolean? @default(false)
  pool            Boolean? @default(false)
  sauna           Boolean? @default(false)
  jacuzzi         Boolean? @default(false)
  grill           Boolean? @default(false)
  oven            Boolean? @default(false)
  stove           Boolean? @default(false)
  wheelAccessible Boolean? @default(false)
  fencedInYard    Boolean? @default(false)
  secureLobby     Boolean? @default(false)
  keylessEntry    Boolean? @default(false)
  alarmSystem     Boolean? @default(false)
  storageShed     Boolean? @default(false)
  gatedEntry      Boolean? @default(false)
  smokeDetector   Boolean? @default(false)
  carbonMonoxide  Boolean? @default(false)

  // Kitchen
  garbageDisposal Boolean? @default(false)
  dishwasher      Boolean? @default(false)
  fridge          Boolean? @default(false)

  // Furnished
  tv                Boolean? @default(false)
  workstation       Boolean? @default(false)
  microwave         Boolean? @default(false)
  kitchenEssentials Boolean? @default(false)
  linens            Boolean? @default(false)
  privateBathroom   Boolean? @default(false)

  allParticipants User[] @relation("TripParticipants")

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings        Listing[]
  matches         Match[]
  favorites       Favorite[]
  housingRequests HousingRequest[]
  dislikes        Dislike[]
  maybes          Maybe[]
  applications    Application[]
  bookings        Booking[]
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  content    String
  url        String
  createdAt  DateTime @default(now())
  unread     Boolean  @default(true)
  actionType String // This will store the type of action (e.g., "HousingRequest", "Payment", "Booking", "Review")
  actionId   String // This will store the ID of the related action

  user User @relation(fields: [userId], references: [id])

  @@index([actionType, actionId])
}

model Message {
  id                 String   @id @default(cuid())
  content            String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  senderId           String
  conversationId     String
  imgUrl             String?
  fileName           String?
  fileType           String?
  fileSize           Int?
  fileKey            String?
  isRead             Boolean  @default(false)
  readAt             DateTime?
  notificationId     String? // Corrected typo
  notificationSentAt DateTime? // Corrected typo
  metadata           String?  @db.Text // Store JSON metadata like clientId, delivery status, etc.

  attachments  Attachment[] // New field for multiple attachments

  sender       User          @relation("MessageSender", fields: [senderId], references: [id])
  conversation Conversation  @relation(fields: [conversationId], references: [id])
  readBy       MessageRead[]
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  url       String   // URL to access the file
  fileName  String   // Original name of the file
  fileKey   String?  // Key for S3 or other storage
  fileType  String   // MIME type
  fileSize  Int?     // Size in bytes

  createdAt DateTime @default(now())

  @@index([messageId])
}

model Conversation {
  id           String                    @id @default(cuid())
  name         String? // For group chats
  isGroup      Boolean                   @default(false)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  listingId    String?
  listing      Listing?   @relation("ConversationToListing", fields: [listingId], references: [id])
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String    @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())
  leftAt         DateTime? // For tracking when someone leaves a group
  role           String    @default("member") // Could be "admin", "member", etc.

  conversation Conversation @relation(fields: [conversationId], references: [id])

  User User @relation(fields: [userId], references: [id])

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model Match {
  id                    String    @id @default(uuid())
  tripId                String
  listingId             String
  booking               Booking?
  monthlyRent           Int?
  leaseDocumentId       String?
  stripePaymentMethodId String?
  stripePaymentIntentId String?
  paymentAuthorizedAt   DateTime?
  paymentAmount         Int?
  paymentCapturedAt     DateTime?
  paymentStatus         String?
  tenantSignedAt        DateTime?
  landlordSignedAt      DateTime?

  trip          Trip           @relation(fields: [tripId], references: [id])
  listing       Listing        @relation(fields: [listingId], references: [id])
  BoldSignLease BoldSignLease?
  Lease         Lease?
  paymentTransactions PaymentTransaction[]

  @@index([tripId])
  @@index([stripePaymentIntentId])
}

model Favorite {
  id        String   @id @default(uuid())
  tripId    String
  listingId String?
  rank      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, rank])
  @@unique([tripId, listingId])
}

model Dislike {
  id        String   @id @default(uuid())
  tripId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([tripId, listingId])
}

model Maybe {
  id        String   @id @default(uuid())
  tripId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([tripId, listingId])
}

model Application {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDefault  Boolean? @default(false)
  tripId     String?
  userId     String
  isComplete Boolean  @default(false)

  // Personal Info
  firstName    String?
  middleName   String?
  lastName     String?
  noMiddleName Boolean?  @default(false)
  dateOfBirth  DateTime?
  ssn          String? // Encrypted value to be stored

  residentialHistories ResidentialHistory[]

  // Comments to explain Yes answers
  evicted            Boolean?
  brokenLease        Boolean?
  felony             Boolean?
  landlordDispute    Boolean?
  evictedExplanation String?
  felonyExplanation  String?

  // Relationships
  user               User                @relation(fields: [userId], references: [id])
  trip               Trip?               @relation(fields: [tripId], references: [id])
  identifications    Identification[] // Keep as one-to-many temporarily
  incomes            Income[]
  verificationImages VerificationImage[]

  @@unique([userId, tripId])
  @@unique([userId, isDefault])
}

model Identification {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  idType        String
  idNumber      String
  idPhotos      IDPhoto[] // One-to-many relationship with ID photos
  isPrimary     Boolean     @default(false) // Flag for the primary ID

  @@index([applicationId])
}

model IDPhoto {
  id               String         @id @default(cuid())
  url              String
  identification   Identification @relation(fields: [identificationId], references: [id], onDelete: Cascade)
  identificationId String
  isPrimary        Boolean        @default(false)
  createdAt        DateTime       @default(now())

  @@index([identificationId])
}

model Income {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  source        String
  monthlyAmount String
  imageUrl      String?

  @@index([applicationId])
}

enum ImageCategory {
  Income
  Identification
}

model VerificationImage {
  id            String        @id @default(cuid())
  url           String
  category      ImageCategory
  application   Application   @relation(fields: [applicationId], references: [id])
  applicationId String

  @@index([applicationId])
}

model Purchase {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     String     @default("pending")
  isRedeemed Boolean    @default(false)
  email      String?
  type       String
  amount     Int?
  userId     String?
  orderId    String?
  metadata   Json?
  user       User?      @relation(fields: [userId], references: [id])
  bgsReport  BGSReport?

  @@index([userId])
}

model BGSReport {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  purchaseId      String?   @unique
  userId          String
  orderId         String    @unique
  status          String    @default("pending")
  reportData      Json?
  receivedAt      DateTime?
  
  // Relationships
  purchase        Purchase? @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([userId])
}

model PersonReport {
  id            String   @id @default(cuid())
  userId        String   @unique
  firstName     String
  lastName      String
  dateOfBirth   String?
  city          String?
  state         String?
  reportToken   String?
  bankruptcies  Int?
  judgements    Int?
  liens         Int?
  isSexOffender Boolean?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CreditReport {
  id              String       @id @default(uuid())
  userId          String       @unique
  creditBucket    CreditBucket
  creditUpdatedAt DateTime
  consentReceived DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RentPayment {
  id                    String              @id @default(cuid())
  bookingId             String
  amount                Int
  dueDate               DateTime
  isPaid                Boolean             @default(false)
  stripePaymentMethodId String?
  paymentAuthorizedAt   DateTime?
  paymentCapturedAt     DateTime?
  stripePaymentIntentId String?
  failureReason         String?
  retryCount           Int                 @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Receipt support
  transactionId         String?             @unique
  transaction           PaymentTransaction? @relation(fields: [transactionId], references: [id])

  booking Booking @relation(fields: [bookingId], references: [id])
}

model PaymentReceipt {
  id                String        @id @default(uuid())
  receiptNumber     String        @unique
  paymentType       String        // "reservation", "rent", "deposit", "fees"
  
  // Receipt totals
  totalAmount       Int
  subtotalAmount    Int
  taxAmount         Int           @default(0)
  serviceFeeAmount  Int           @default(0)
  currency          String        @default("usd")
  
  // Timestamps
  issuedAt          DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Document storage
  receiptPdfUrl     String?
  receiptHtmlUrl    String?
  
  // Relationships
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  receiptItems      ReceiptItem[]
  transactions      PaymentTransaction[]
  
  @@index([userId])
  @@index([receiptNumber])
  @@index([paymentType])
}

model ReceiptItem {
  id          String  @id @default(uuid())
  receiptId   String
  
  // Item details
  description String
  quantity    Int     @default(1)
  unitPrice   Int
  totalPrice  Int
  category    String? // "reservation_deposit", "application_fee", "processing_fee", "rent", "security_deposit"
  
  // Tax information
  taxable     Boolean @default(false)
  taxAmount   Int     @default(0)
  taxRate     Float?  // Store as decimal (e.g., 0.08 for 8%)
  
  // Relationship
  receipt     PaymentReceipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  
  @@index([receiptId])
  @@index([category])
}

model PaymentTransaction {
  id                    String   @id @default(uuid())
  transactionNumber     String   @unique
  
  // Stripe integration
  stripePaymentIntentId String?  @unique
  stripeChargeId        String?
  
  // Transaction details
  amount                Int
  currency              String   @default("usd")
  status                String   // "pending", "succeeded", "failed", "refunded"
  paymentMethod         String   // "card", "ach", "bank_transfer"
  
  // Fee breakdown (in cents)
  platformFeeAmount     Int      @default(0)
  stripeFeeAmount       Int      @default(0)
  netAmount             Int      // Amount after fees
  
  // Timestamps
  processedAt           DateTime?
  failedAt              DateTime?
  refundedAt            DateTime?
  
  // Error handling
  failureReason         String?
  failureCode           String?
  
  // Relationships
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  
  // Link to various payment sources
  matchId               String?
  match                 Match?   @relation(fields: [matchId], references: [id])
  bookingId             String?
  booking               Booking? @relation(fields: [bookingId], references: [id])
  rentPayment           RentPayment?
  
  // Receipt generation
  receiptId             String?
  receipt               PaymentReceipt? @relation(fields: [receiptId], references: [id])
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([processedAt])
  @@index([matchId])
  @@index([bookingId])
}

model BoldSignTemplate {
  id                  String   @id @default(uuid())
  embedUrl            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  templateName        String?
  templateDescription String?

  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
  listings Listing[]

  @@index([userId])
}

model BoldSignLease {
  id                String   @id @default(cuid())
  embedUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  matchId           String
  landlordId        String
  primaryTenantId   String
  secondaryTenantId String?
  landlordSigned    Boolean  @default(false)
  tenantSigned      Boolean  @default(false)

  match          Match           @relation(fields: [matchId], references: [id])
  landlord       User            @relation(fields: [landlordId], references: [id])
  housingRequest HousingRequest?

  @@unique([matchId])
}

model Lease {
  id                String   @id @default(cuid())
  embedUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  matchId           String
  landlordId        String
  primaryTenantId   String
  secondaryTenantId String?
  landlordSigned    Boolean  @default(false)
  tenantSigned      Boolean  @default(false)

  match    Match @relation(fields: [matchId], references: [id])
  landlord User  @relation(fields: [landlordId], references: [id])

  @@unique([matchId])
}

model BlogArticle {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String     @db.VarChar(255)
  content     String     @db.LongText
  excerpt     String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  imageUrl    String?
  published   Boolean    @default(false)
  authorName  String     @default("The Matchbook Team")
  authorTitle String?
  categories  Category[]
  tags        Tag[]

  @@index([slug])
  @@index([createdAt])
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?       @db.Text
  articles    BlogArticle[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([slug])
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  articles  BlogArticle[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([slug])
}

model Ticket {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  status      String    @default("open") // open, in-progress, resolved, closed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?

  // User information
  email  String
  name   String?
  userId String? // Optional: link to user if they're logged in

  // Context information
  pageUrl   String?
  userAgent String?

  // Category/type of issue
  category String? // bug, feature-request, support, complaint, etc.
  priority String? // low, medium, high, urgent

  // Internal tracking
  assignedTo   String? // Admin/support person email
  notifyEmail  String? // Email to send notifications to (configurable)
  supportNotes String? @db.Text // Internal notes for support staff

  // Relationships
  responses TicketResponse[]
  activities TicketActivity[]
  user      User?            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([category])
}

model TicketResponse {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  isFromStaff Boolean  @default(false)
  authorName  String?
  authorEmail String?

  // Relationship
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

  @@index([ticketId])
}

model TicketActivity {
  id        String   @id @default(cuid())
  ticketId  String
  action    String   // "ticket_created", "status_changed", "note_saved", "chat_initiated", "assignment_changed", "response_added", etc.
  details   String?  @db.Text // JSON string with additional context (e.g., old_status, new_status, note_content, etc.)
  createdAt DateTime @default(now())
  
  // Who performed the action
  actorType String   // "user", "admin", "system"
  actorId   String?  // User ID if applicable
  actorName String?  // Display name for the actor
  actorEmail String? // Email for the actor
  
  // Relationship
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@index([ticketId])
  @@index([createdAt])
  @@index([action])
}

model ResidentialHistory {
  id                  String  @id @default(uuid())
  street              String?
  apt                 String?
  city                String?
  state               String?
  zipCode             String?
  monthlyPayment      String?
  durationOfTenancy   String?
  housingStatus       String?
  landlordFirstName   String?
  landlordLastName    String?
  landlordEmail       String?
  landlordPhoneNumber String?
  index               Int?

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
}

model ApplicationError {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  errorMessage String    @db.Text
  errorStack   String?   @db.Text
  errorDigest  String?
  pathname     String?   // The URL path where the error occurred
  userAgent    String?   @db.Text // Browser/client information
  isAuthError  Boolean?  // Was this classified as a likely auth error?
  userId       String?   // Optional: link to user if they were logged in

  user User? @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
}

model ClientLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  level     String   // debug, info, warn, error
  message   String   @db.Text
  data      String?  @db.Text // JSON stringified data
  metadata  String?  @db.Text // JSON stringified metadata
  userId    String?  // Optional: link to user if they were logged in
  device    String?  // ios, android, web
  pathname  String?  // The URL path where the log was recorded
  userAgent String?  @db.Text // Browser/client information

  user User? @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
  @@index([level])
}

model ListingInCreation {
  id                     String         @id @default(uuid())
  isApproved             Boolean?
  approvalStatus         ApprovalStatus @default(pendingReview)
  isTestListing          Boolean?
  createdAt              DateTime?      @default(now())
  lastModified           DateTime?      @default(now())
  lastApprovalDecision   DateTime?
  lastDecisionComment    String?        @db.Text
  status                 String?
  title                  String?
  description            String?        @db.VarChar(1500)
  imageSrc               String?
  category               String?
  roomCount              Int?
  bathroomCount          Float?
  guestCount             Int?
  latitude               Float?
  longitude              Float?
  locationString         String?
  city                   String?
  state                  String?
  streetAddress1         String?
  streetAddress2         String?
  postalCode             String?
  userId                 String?
  squareFootage          Int?
  depositSize            Int?
  petDeposit             Int?
  petRent                Int?
  reservationDeposit     Int?
  rentDueAtBooking       Int?
  requireBackgroundCheck Boolean?
  shortestLeaseLength    Int?
  longestLeaseLength     Int?
  shortestLeasePrice     Int?
  longestLeasePrice      Int?
  furnished              Boolean?
  utilitiesIncluded      Boolean?
  petsAllowed            Boolean?
  markedActiveByUser     Boolean?
  
  // Pricing configuration fields
  varyPricingByLength    Boolean?
  basePrice              String?
  utilitiesUpToMonths    Int?
  monthlyPricingData     String? @db.Text

  // General Amenities
  airConditioner     Boolean?
  laundryFacilities  Boolean?
  fitnessCenter      Boolean?
  elevator           Boolean?
  wheelchairAccess   Boolean?
  doorman            Boolean?
  parking            Boolean?
  wifi               Boolean?
  kitchen            Boolean?
  dedicatedWorkspace Boolean?
  hairDryer          Boolean?
  iron               Boolean?
  heater             Boolean?
  hotTub             Boolean?
  smokingAllowed     Boolean?
  eventsAllowed      Boolean?
  privateEntrance    Boolean?
  security           Boolean?
  waterfront         Boolean?
  beachfront         Boolean?
  mountainView       Boolean?
  cityView           Boolean?
  waterView          Boolean?

  // Washer and Dryer Options
  washerInUnit       Boolean?
  washerHookup       Boolean?
  washerNotAvailable Boolean?
  washerInComplex    Boolean?
  dryerInUnit        Boolean?
  dryerHookup        Boolean?
  dryerNotAvailable  Boolean?
  dryerInComplex     Boolean?

  // Parking Options
  offStreetParking     Boolean?
  streetParking        Boolean?
  streetParkingFree    Boolean?
  coveredParking       Boolean?
  coveredParkingFree   Boolean?
  uncoveredParking     Boolean?
  uncoveredParkingFree Boolean?
  garageParking        Boolean?
  garageParkingFree    Boolean?
  evCharging           Boolean?

  // Pet Policies
  allowDogs Boolean?
  allowCats Boolean?

  // Structural Amenities
  gym             Boolean?
  balcony         Boolean?
  patio           Boolean?
  sunroom         Boolean?
  fireplace       Boolean?
  firepit         Boolean?
  pool            Boolean?
  sauna           Boolean?
  jacuzzi         Boolean?
  grill           Boolean?
  oven            Boolean?
  stove           Boolean?
  wheelAccessible Boolean?
  fencedInYard    Boolean?
  secureLobby     Boolean?
  keylessEntry    Boolean?
  alarmSystem     Boolean?
  storageShed     Boolean?
  gatedEntry      Boolean?
  smokeDetector   Boolean?
  carbonMonoxide  Boolean?

  // Kitchen
  garbageDisposal Boolean?
  dishwasher      Boolean?
  fridge          Boolean?

  //Furnished
  tv                Boolean?
  workstation       Boolean?
  microwave         Boolean?
  kitchenEssentials Boolean?
  linens            Boolean?
  privateBathroom   Boolean?

  // Relationships
  listingImages     ListingImage[] // Relation to images for drafts
  monthlyPricing    ListingMonthlyPricing[] // Relation to monthly pricing for drafts
}

model TestSuite {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  category    String   // e.g., "payment-generation", "booking-logic", etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User ID of creator
  
  testCases TestCase[]
  
  @@index([category])
  @@index([createdBy])
}

model TestCase {
  id          String   @id @default(uuid())
  testSuiteId String
  name        String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Test input parameters (stored as JSON)
  inputData   Json     // e.g., { bookingId, monthlyRent, startDate, endDate, stripePaymentMethodId }
  
  // Expected results
  expectedData Json    // e.g., { expectedPayments: 12, expectedAmounts: [2000, 2000, ...] }
  
  // Test suite relationship
  testSuite   TestSuite @relation(fields: [testSuiteId], references: [id], onDelete: Cascade)
  
  // Test execution results
  testResults TestResult[]
  
  @@index([testSuiteId])
}

model TestResult {
  id         String   @id @default(uuid())
  testCaseId String
  runId      String   // Unique identifier for a test run session
  
  // Test execution details
  testName   String   // e.g., "Payment Count", "Payment Amounts"
  passed     Boolean
  expected   Json     // Expected value for this specific test
  actual     Json     // Actual value received
  message    String?  @db.Text // Additional test message/description
  
  // Execution metadata
  executedAt DateTime @default(now())
  executionTime Int?  // Execution time in milliseconds
  
  // Error details if test failed
  errorMessage String? @db.Text
  errorStack   String? @db.Text
  
  // Relationship
  testCase TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  
  @@index([testCaseId])
  @@index([runId])
  @@index([executedAt])
}

model ListingLocationChange {
  id        String   @id @default(uuid())
  listingId String
  userId    String?  // User who made the change
  createdAt DateTime @default(now())
  
  // Old location values (before change)
  oldStreetAddress1 String?
  oldStreetAddress2 String?
  oldCity           String?
  oldState          String?
  oldPostalCode     String?
  oldLatitude       Float?
  oldLongitude      Float?
  
  // New location values (after change)
  newStreetAddress1 String?
  newStreetAddress2 String?
  newCity           String?
  newState          String?
  newPostalCode     String?
  newLatitude       Float?
  newLongitude      Float?
  
  // Array of field names that changed (JSON array)
  changedFields Json // e.g., ["streetAddress1", "city"]
  
  // Relationships
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  
  @@index([listingId])
  @@index([userId])
  @@index([createdAt])
}

model PdfTemplate {
  id           String   @id @default(uuid())
  title        String
  description  String?
  type         String   @default("lease") // 'lease', 'addendum', 'disclosure', 'other'
  userId       String
  listingId    String?  // Optional: templates can be global or listing-specific
  
  // Template configuration (stored as JSON for fast database queries)
  templateData Json     // Contains fields, recipients, and metadata
  
  // PDF file reference (stored in DigitalOcean Spaces)
  pdfFileUrl   String   // URL to original PDF in Spaces
  pdfFileName  String   // Original filename
  pdfFileSize  Int?     // File size in bytes
  pdfFileKey   String   // Unique key for file in Spaces
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing      Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  documents    DocumentInstance[]
  
  @@index([userId])
  @@index([listingId])
  @@index([createdAt])
  @@index([title])
}

model DocumentInstance {
  id           String   @id @default(uuid())
  templateId   String
  userId       String   // User who created the document
  
  // Document state
  status       DocumentStatus @default(DRAFT)
  
  // Document data (can be modified from template)
  documentData Json     // Contains fields, recipients (from template but can be customized)
  
  // PDF file reference (copy of template PDF)
  pdfFileUrl   String   // URL to PDF in Spaces
  pdfFileName  String   // Filename
  pdfFileKey   String   // Unique key for file in Spaces
  
  // Signing workflow
  currentStep  String   @default("document") // document, signer1, signer2, completed
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?
  
  // Relationships
  template     PdfTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  signingSessions SigningSession[]
  fieldValues     FieldValue[]
  
  @@index([userId])
  @@index([templateId])
  @@index([status])
  @@index([currentStep])
  @@index([createdAt])
}

model UserSignature {
  id          String   @id @default(uuid())
  userId      String
  type        String   // 'drawn' or 'typed'
  data        String   @db.Text // base64 image for drawn, text for typed (using Text for large data)
  fontFamily  String?  // for typed signatures (dancing-script, caveat, etc.)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model SigningSession {
  id           String   @id @default(uuid())
  documentId   String
  
  // Signer information
  signerIndex  Int      // 0 = first signer, 1 = second signer, etc.
  signerEmail  String
  signerName   String
  
  // Session state
  status       SigningStatus @default(PENDING)
  
  // Access control
  accessToken  String   @unique // Unique token for accessing this signing session
  
  // Progress tracking
  startedAt    DateTime?
  completedAt  DateTime?
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  document     DocumentInstance @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([accessToken])
  @@index([signerEmail])
  @@index([status])
}

model FieldValue {
  id           String   @id @default(uuid())
  documentId   String
  
  // Field identification
  fieldId      String   // Field ID from template
  fieldType    String   // SIGNATURE, NAME, DATE, etc.
  
  // Signer information
  signerIndex  Int      // Which signer filled this field
  signerEmail  String
  
  // Field value (stored as JSON to handle different field types)
  value        Json     // String for text, base64 for signatures, etc.
  
  // Metadata
  signedAt     DateTime @default(now())
  
  // Relationships
  document     DocumentInstance @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([fieldId])
  @@index([signerEmail])
  @@unique([documentId, fieldId]) // Each field can only be signed once per document
}

enum DocumentStatus {
  DRAFT       // Step 2: Document created, not yet sent for signing
  IN_PROGRESS // Step 3+: Sent for signing, some signers may have completed
  COMPLETED   // Step 4: All signers completed
  CANCELLED   // Document cancelled
}

enum SigningStatus {
  PENDING   // Not yet started signing
  STARTED   // Started signing session
  COMPLETED // Completed signing
  EXPIRED   // Session expired
}
