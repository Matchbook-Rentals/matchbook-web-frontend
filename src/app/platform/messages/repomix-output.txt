This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
components/
  ConversationList.tsx
  MessageArea.tsx
message-interface.tsx
page.tsx

================================================================
Files
================================================================

================
File: components/ConversationList.tsx
================
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Conversation } from '@prisma/client';
import { UserResource } from '@clerk/types';

// Define the conversation participant structure
interface ConversationParticipant {
  id: string;
  userId: string;
  conversationId: string;
  joinedAt: Date;
  leftAt: Date | null;
  role: string;
  User: {
    id: string;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    imageUrl: string | null;
  };
}

// Define the extended conversation type
interface ExtendedConversation extends Conversation {
  messages: any[];
  participants: ConversationParticipant[];
}

interface ConversationListProps {
  conversations: ExtendedConversation[];
  onSelectConversation: (index: number) => void;
  onCreateConversation: (email: string) => void;
  user: UserResource;
}

const ConversationList: React.FC<ConversationListProps> = ({
  conversations,
  onSelectConversation,
  onCreateConversation,
  user
}) => {
  const getParticipantInfo = (conv: ExtendedConversation, currentUser: UserResource) => {
    if (!currentUser) return { displayName: "Loading...", imageUrl: "" };

    // Find the other participant in the conversation
    const otherParticipant = conv.participants.find(
      p => p.User.id !== currentUser.id
    );

    if (!otherParticipant) {
      return { displayName: "Unknown", imageUrl: "" };
    }

    const { User } = otherParticipant;
    let displayName = User.firstName && User.lastName
      ? `${User.firstName} ${User.lastName}`
      : User.email || "Unknown";

    return {
      displayName,
      imageUrl: User.imageUrl || ""
    };
  };

  return (
    <Card className="w-1/3 bg-gray-200 h-[75vh] flex flex-col pb-4">
      <CardHeader>
        <CardTitle className='text-center'>Conversations</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col">
        <ScrollArea className="flex-1 mb-4">
          {conversations && conversations.length > 0 ? (
            conversations.map((conv, index) => {
              const { displayName, imageUrl } = getParticipantInfo(conv, user);
              const lastMessage = conv.messages && conv.messages.length > 0
                ? conv.messages[conv.messages.length - 1]
                : null;

              return (
                <Card
                  key={conv.id}
                  className="w-full mb-2 cursor-pointer border bg-background hover:bg-gray-100 transition-colors duration-200"
                  onClick={() => onSelectConversation(index)}
                >
                  <CardContent className="p-4 flex items-start">
                    <img
                      onMouseOver={() => console.log(conv)}
                      src={imageUrl || "/placeholder-avatar.png"}
                      className="w-10 h-10 rounded-full mr-2 flex-shrink-0"
                      alt={displayName}
                    />
                    <div className="flex flex-col flex-grow min-w-0">
                      <div className="flex justify-between items-start w-full">
                        <span className="text-xs text-black">{displayName}</span>
                        <span className="text-xs text-black ml-2 flex-shrink-0">
                          {lastMessage ? new Date(lastMessage.updatedAt).toLocaleString() : 'No messages'}
                        </span>
                      </div>
                      <span className="text-md text-black truncate">
                        {lastMessage ? lastMessage.content : 'Start a conversation'}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              );
            })
          ) : (
            <div className="flex flex-col items-center justify-center h-32 text-gray-500">
              {(
                <p>No conversations yet.</p>
              )}
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
};

export default ConversationList;

================
File: components/MessageArea.tsx
================
import React, { useState, useRef, useEffect } from 'react';
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { UploadButton } from "@/app/utils/uploadthing";
import { PaperclipIcon } from 'lucide-react';
import Image from "next/image";
import { Dialog, DialogContent } from "@/components/ui/dialog";

interface MessageAreaProps {
  selectedConversation: string | null;
  messages: any[];
  onSendMessage: (message: string, imgUrl?: string) => void;
  currentUserId: string | undefined;
}

interface UploadData {
  name: string;
  size: number;
  key: string;
  serverData: {
    uploadedBy: string;
    fileUrl: string;
  };
  url: string;
  customId: string | null;
  type: string;
}

const MessageArea: React.FC<MessageAreaProps> = ({
  selectedConversation,
  messages,
  onSendMessage,
  currentUserId
}) => {
  const [newMessageInput, setNewMessageInput] = useState('');
  const [messageAttachments, setMessageAttachments] = useState<string[]>([]);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const bottomRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSend = () => {
    if (newMessageInput.trim()) {
      // Only pass the attachment if it exists
      const attachment = messageAttachments.length > 0 ? messageAttachments[0] : undefined;
      onSendMessage(newMessageInput, attachment);
      setNewMessageInput('');
      setMessageAttachments([]);
      scrollToBottom();
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSend();
    }
  };

  const handleUploadFinish = (res: UploadData[]) => {
    setMessageAttachments(prev => [...prev, ...res.map(r => r.url)]);
  };

  const handleImageClick = (imageUrl: string) => {
    setSelectedImage(imageUrl);
  };

  return (
    <div className="flex-1 flex flex-col h-[75vh] ">
      {selectedConversation ? (
        <ScrollArea className="flex-1 px-8 mb-4">
          {messages.map((message) => (
            <div key={message.id} className={`mb-2 ${message.senderId === currentUserId ? 'text-right' : 'text-left'}`}>
              <div className={`inline-block p-2 rounded ${message.senderId === currentUserId
                ? 'bg-blue-500 text-white'
                : 'bg-green-500 text-white'
                }`}>
                {message.imgUrl && (
                  <div className="mb-2">
                    <Image
                      src={message.imgUrl}
                      alt="Message Attachment"
                      width={200}
                      height={200}
                      className="rounded cursor-pointer"
                      onClick={() => handleImageClick(message.imgUrl)}
                    />
                  </div>
                )}
                <div>{message.content}</div>
              </div>
            </div>
          ))}
          <div ref={bottomRef} />
        </ScrollArea>
      ) : (
        <div className="flex-1 flex items-center justify-center text-gray-500">
          <p>Select a conversation or start a new one</p>
        </div>
      )}

      {/* Message input area */}
      <div className="mt-auto px-4">
        {/* Display message attachments */}
        <div className="flex flex-wrap gap-2 mb-2">
          {messageAttachments.map((attachment, index) => (
            <div key={index} className="inline-block p-2 rounded bg-gray-200">
              <Image
                src={attachment}
                alt="Message Attachment"
                width={100}
                height={100}
                className="cursor-pointer"
                onClick={() => handleImageClick(attachment)}
              />
            </div>
          ))}
        </div>

        {/* Input and buttons flex container */}
        <div className="flex items-center">
          <input
            type="text"
            className="flex-1 min-w-0 px-3 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Type a message..."
            value={newMessageInput}
            onChange={(e) => setNewMessageInput(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={!selectedConversation}
          />
          <div className={`flex-shrink-0 ${!selectedConversation ? "opacity-50 pointer-events-none" : ""}`}>
            <UploadButton
              endpoint="messageUploader"
              onClientUploadComplete={handleUploadFinish}
              onUploadError={(error) => alert(error.message)}
              className="p-0"
              content={{
                button: <PaperclipIcon className="w-6 h-6" />,
                allowedContent: 'Image upload'
              }}
              appearance={{
                button: 'bg-parent text-black focus-within:ring-primaryBrand data-[state="uploading"]:after:bg-[#404040]',
                allowedContent: 'hidden'
              }}
            />
          </div>
          <Button
            className="rounded-l-none flex-shrink-0"
            onClick={handleSend}
            disabled={!selectedConversation || !newMessageInput.trim()}
          >
            Send
          </Button>
        </div>
      </div>

      {/* Image Viewer Dialog */}
      <Dialog open={!!selectedImage} onOpenChange={(open) => !open && setSelectedImage(null)}>
        <DialogContent className="max-w-3xl" hideCloseButton={false}>
          {selectedImage && (
            <div className="flex justify-center items-center">
              <Image
                src={selectedImage}
                alt="Enlarged Image"
                width={800}
                height={800}
                className="max-h-[80vh] w-auto object-contain mt-6"
                priority
              />
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default MessageArea;

================
File: message-interface.tsx
================
'use client'
//IMports
import React, { useState, useEffect } from 'react';
import { useUser } from "@clerk/nextjs";
import { Conversation } from '@prisma/client';
import ConversationList from './components/ConversationList';
import MessageArea from './components/MessageArea';
import { getConversation, createMessage, createConversation, deleteConversation, getAllConversations } from '@/app/actions/conversations';

// Define the expanded Conversation type that includes the messages and participants
interface ConversationParticipant {
  id: string;
  userId: string;
  conversationId: string;
  joinedAt: Date;
  leftAt: Date | null;
  role: string;
  User: {
    id: string;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    imageUrl: string | null;
  };
}

interface ExtendedConversation extends Conversation {
  messages: any[];
  participants: ConversationParticipant[];
}

// Define the message data interface to include imgUrl
interface MessageData {
  content: string;
  senderRole: 'Host' | 'Tenant'; // Update from 'Landlord' to 'Host'
  conversationId: string;
  receiverId: string;
  imgUrl?: string;
}

const MessageInterface = ({ conversations }: { conversations: ExtendedConversation[] }) => {
  const { user } = useUser();
  const [userType, setUserType] = useState<'Host' | 'Tenant'>('Tenant'); // Changed default from 'Host' to 'Tenant'
  const [allConversations, setAllConversations] = useState<ExtendedConversation[]>(conversations || []);
  const [selectedConversationIndex, setSelectedConversationIndex] = useState<number | null>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [sseMessages, setSseMessages] = useState<any[]>([]);
  const [testEmail, setTestEmail] = useState('');
  const [isDeleting, setIsDeleting] = useState(false);
  const [unreadHostMessages, setUnreadHostMessages] = useState(0);
  const [unreadTenantMessages, setUnreadTenantMessages] = useState(0);

  const baseUrl = process.env.NEXT_PUBLIC_GO_SERVER_URL
  const url = `${baseUrl}/events?id=${user?.id}`

  useEffect(() => {
    const fetchConversation = async () => {
      if (selectedConversationIndex !== null) {
        const conversation = allConversations[selectedConversationIndex];
        const fullConversation = await getConversation(conversation.id);
        if (fullConversation) {
          setMessages(fullConversation.messages || []);
        }
      } else {
        setMessages([]);
      }
    };

    fetchConversation();
  }, [selectedConversationIndex, allConversations]);

  useEffect(() => {
    if (!user?.id) return;

    let eventSource: EventSource | null = null;
    let retryCount = 0;
    const maxRetries = 5;
    const retryDelay = 3000; // 3 seconds

    const connectSSE = () => {
      if (retryCount >= maxRetries) {
        console.error('Max SSE connection retries reached');
        // Wait for a longer period before trying again
        setTimeout(() => {
          retryCount = 0;
          connectSSE();
        }, 30000); // 30 seconds
        return;
      }

      // Close existing connection if any
      if (eventSource) {
        eventSource.close();
      }

      console.log(`Connecting to SSE: ${url}`);
      eventSource = new EventSource(url);

      eventSource.onopen = () => {
        console.log('SSE connection opened');
        retryCount = 0; // Reset retry count on successful connection
      };

      eventSource.onmessage = (event) => {
        console.log('SSE message received:', event);
        if (event.data.trim() === ': keepalive') {
          // Ignore heartbeat messages
          console.log('Keepalive received');
          return;
        }

        try {
          const message = JSON.parse(event.data);
          setSseMessages((prevMessages) => [...prevMessages, message]);

          // Update unread message counters based on the message's conversation type
          const messageConversation = allConversations.find(conv => conv.id === message.conversationId);
          if (messageConversation) {
            // Find the user's role in this conversation
            const userParticipant = messageConversation.participants.find(
              participant => participant.userId === user?.id
            );

            if (userParticipant) {
              const messageRole = userParticipant.role;

              // Check if this message's conversation is currently selected/open
              const isConversationOpen = selectedConversationIndex !== null &&
                allConversations[selectedConversationIndex]?.id === message.conversationId;

              // Increment unread counter if the conversation is not open
              if (!isConversationOpen) {
                if (messageRole === 'Host') {
                  setUnreadHostMessages(prev => prev + 1);
                } else if (messageRole === 'Tenant') {
                  setUnreadTenantMessages(prev => prev + 1);
                }
              }
            }
          }

          // Check if this message is from a conversation we already know about
          const conversationExists = allConversations.some(conv => conv.id === message.conversationId);

          if (!conversationExists) {
            console.log('New conversation detected. Fetching updated conversations...');
            // Fetch all conversations to get the new one
            const fetchNewConversations = async () => {
              try {
                const updatedConversations = await getAllConversations();
                if (updatedConversations) {
                  setAllConversations(updatedConversations);

                  // Find the index of the new conversation to select it
                  const newConvIndex = updatedConversations.findIndex(
                    conv => conv.id === message.conversationId
                  );

                  if (newConvIndex !== -1) {
                    setSelectedConversationIndex(newConvIndex);
                  }
                }
              } catch (error) {
                console.error('Failed to fetch new conversations:', error);
              }
            };

            fetchNewConversations();
          } else {
            // Update existing conversation with the new message
            setAllConversations((prevConversations) => {
              const updatedConversations = [...prevConversations];
              const index = updatedConversations.findIndex(conv => conv.id === message.conversationId);
              if (index !== -1) {
                // Create a new array if messages property doesn't exist yet
                const currentMessages = updatedConversations[index].messages || [];
                updatedConversations[index] = {
                  ...updatedConversations[index],
                  messages: [...currentMessages, message]
                };
              }
              return updatedConversations;
            });
          }
        } catch (error) {
          console.error('Error parsing SSE message:', error, event.data);
        }
      };

      eventSource.onerror = (error) => {
        console.error('SSE connection error:', error);

        // Close the current connection
        if (eventSource) {
          eventSource.close();
          eventSource = null;
        }

        // Attempt to reconnect after delay
        retryCount++;
        console.log(`Retrying SSE connection (${retryCount}/${maxRetries}) in ${retryDelay}ms`);
        setTimeout(connectSSE, retryDelay);
      };
    };

    connectSSE();

    return () => {
      console.log('Closing SSE connection');
      if (eventSource) {
        eventSource.close();
        eventSource = null;
      }
    };
  }, [user, url]);

  const handleSelectConversation = (index: number) => {
    setSelectedConversationIndex(index);

    // Clear relevant unread message counter when selecting a conversation
    const conversation = allConversations[index];
    const userParticipant = conversation.participants.find(
      participant => participant.userId === user?.id
    );

    if (userParticipant && userParticipant.role === 'Host') {
      setUnreadHostMessages(0);
    } else if (userParticipant && userParticipant.role === 'Tenant') {
      setUnreadTenantMessages(0);
    }
  };

  const handleDeleteAllConversations = async () => {
    if (window.confirm('Are you sure you want to delete all your conversations? This action cannot be undone.')) {
      setIsDeleting(true);
      try {
        // Delete each conversation one by one
        for (const conversation of allConversations) {
          await deleteConversation(conversation.id);
        }
        // Clear the local state
        setAllConversations([]);
        setSelectedConversationIndex(null);
        setMessages([]);
      } catch (error) {
        console.error('Failed to delete conversations:', error);
        alert('An error occurred while deleting conversations');
      } finally {
        setIsDeleting(false);
      }
    }
  };

  const handleSendMessage = async (newMessageInput: string, imgUrl?: string) => {
    if (selectedConversationIndex === null || !newMessageInput.trim()) return;

    const selectedConversation = allConversations[selectedConversationIndex];

    // Find the other participant who isn't the current user
    const otherParticipant = selectedConversation.participants.find(
      participant => participant.User.id !== user?.id
    );

    if (!otherParticipant) {
      console.error('Cannot find recipient for message');
      return;
    }

    const messageData: MessageData = {
      content: newMessageInput,
      senderRole: userType,
      conversationId: selectedConversation.id,
      receiverId: otherParticipant.User.id
    };

    if (imgUrl) {
      messageData.imgUrl = imgUrl;
    }

    const newMessage = await createMessage(messageData);

    setMessages([...messages, newMessage]);
  };

  const handleCreateConversation = async (email: string) => {
    if (!email.trim()) return;
    try {
      // Call createConversation with specified roles
      const response = await createConversation(email, 'Host', 'Tenant');

      // Add the new conversation to our state, ensuring it has the expected properties
      const newConversation: ExtendedConversation = {
        ...response,
        messages: [], // Initialize with empty messages array
        // The API response might need to be shaped to match our expected format:
        participants: response.participants.map((p: any) => ({
          ...p,
          User: p.User || {
            id: p.userId,
            firstName: null,
            lastName: null,
            email: null,
            imageUrl: null
          }
        }))
      };

      setAllConversations([...allConversations, newConversation]);
    } catch (error) {
      console.error('Failed to create conversation:', error);
    }
  };

  if (!user) return null;

  const handleTabChange = (value: string) => {
    if (value === 'Host' || value === 'Tenant') {
      setUserType(value as 'Host' | 'Tenant');

      // Clear unread messages count for the tab we're switching to
      if (value === 'Host') {
        setUnreadHostMessages(0);
      } else {
        setUnreadTenantMessages(0);
      }
    }
  };

  // Use all conversations instead of filtering by role
  const filteredConversations = allConversations;

  // No longer checking for other role conversations since we're showing all

  return (
    <div className="flex flex-col">
      <div className="flex flex-1 overflow-hidden">
        <ConversationList
          conversations={filteredConversations}
          onSelectConversation={handleSelectConversation}
          onCreateConversation={handleCreateConversation}
          user={user as any} // Cast to any to bypass the Clerk UserResource type issue
        />
        <MessageArea
          selectedConversation={selectedConversationIndex !== null ? allConversations[selectedConversationIndex].id : null}
          messages={messages}
          onSendMessage={handleSendMessage}
          currentUserId={user?.id}
        />
      </div>

      {/* Testing Tools */}
      <div className="mt-4 p-4 border-t border-gray-200">
        <h3 className="text-lg font-semibold mb-2">Testing Tools</h3>
        <div className="flex items-center mb-3">
          <input
            type="email"
            className="flex-1 px-3 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter email to start conversation"
            value={testEmail}
            onChange={(e) => setTestEmail(e.target.value)}
          />
          <button
            className="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600"
            onClick={() => {
              if (testEmail.trim()) {
                handleCreateConversation(testEmail);
                setTestEmail('');
              }
            }}
          >
            Start Test Conversation
          </button>
        </div>
        <div className="flex justify-end">
          <button
            className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:bg-red-300"
            onClick={handleDeleteAllConversations}
            disabled={isDeleting || allConversations.length === 0}
          >
            {isDeleting ? 'Deleting...' : 'Delete All Conversations'}
          </button>
          <div className="mt-4">
            <h4 className="text-md font-semibold mb-2">SSE Log</h4>
            <pre className="bg-gray-100 p-2 overflow-auto max-h-80 text-sm">{JSON.stringify(sseMessages, null, 2)}</pre>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MessageInterface;

================
File: page.tsx
================
import Breadcrumbs from '@/components/ui/breadcrumbs';
import MessageInterface from './message-interface';
import { getAllConversations } from '@/app/actions/conversations';
import { PAGE_MARGIN } from '@/constants/styles';

export default async function MessagePage() {
  const conversations = await getAllConversations();
  return (
    <div className={`${PAGE_MARGIN} mx-auto`}>
      <Breadcrumbs className='mb-3' links={[{label: 'Messages'}]} />
      <MessageInterface conversations={conversations} />
    </div>
  );
}



================================================================
End of Codebase
================================================================
